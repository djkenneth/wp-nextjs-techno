/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query getFooterPage {\n  customFooter {\n    footer {\n      footerBackground {\n        node {\n          link\n          title\n          uri\n        }\n      }\n      footerLogo {\n        node {\n          link\n          title\n          uri\n        }\n      }\n      description\n      followUsSection {\n        title\n        socialMedia {\n          iconTitle\n          show\n        }\n      }\n      quickLinksSection {\n        title\n        menus {\n          title\n          url\n        }\n      }\n      contactInfoSection {\n        title\n        contactInfo {\n          icon\n          title\n          description\n        }\n      }\n    }\n  }\n}": types.GetFooterPageDocument,
    "query getHeaderPage {\n  customHeader {\n    header {\n      headerBackgroundColor\n      logo {\n        node {\n          link\n          title\n          uri\n        }\n      }\n      menus {\n        title\n        url\n      }\n      cart {\n        title\n        url\n      }\n    }\n  }\n}": types.GetHeaderPageDocument,
    "query TemplateArticlesPost($first: Int!, $after: String) {\n  articles(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    nodes {\n      title\n      content\n      customArticle {\n        thumbnail {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n      }\n      articleCategories {\n        nodes {\n          id\n          name\n          slug\n          uri\n        }\n      }\n      articleTags {\n        nodes {\n          id\n          name\n          slug\n          uri\n        }\n      }\n    }\n  }\n}": types.TemplateArticlesPostDocument,
    "query TemplateCaseStudiesPost {\n  caseStudies {\n    nodes {\n      title\n      content\n      uri\n      slug\n      caseStudies {\n        thumbnail {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        category\n        projectName\n        skills\n        completeDate\n        client\n      }\n      caseStudyCategories {\n        nodes {\n          id\n          name\n          slug\n          uri\n        }\n      }\n    }\n  }\n}": types.TemplateCaseStudiesPostDocument,
    "query TemplateCaseStudyByPost($slug: String!) {\n  caseStudyBy(slug: $slug) {\n    title\n    content\n    uri\n    slug\n    caseStudies {\n      thumbnail {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n      category\n      projectName\n      skills\n      completeDate\n      client\n    }\n    caseStudyCategories {\n      nodes {\n        id\n        name\n        slug\n        uri\n      }\n    }\n  }\n}": types.TemplateCaseStudyByPostDocument,
    "query TemplateHome($uri: String!) {\n  pageBy(uri: $uri) {\n    title\n    content\n    heroSection {\n      heroSection {\n        heroTitle\n        heroDescription\n        heroCard {\n          title\n          description\n        }\n        heroSubTitle\n        heroBackground {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        buttons {\n          title\n          link\n          backgroundColor\n        }\n      }\n    }\n    aboutSection {\n      aboutSection {\n        aboutImage {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        aboutTitle\n        aboutDescription\n        aboutBigHeading\n      }\n    }\n    ourServicesSection {\n      ourServicesBackground {\n        image {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        color\n      }\n      ourServicesSubTitle\n      ourServicesTitle\n      ourServicesServices {\n        icon\n        title\n        description\n        url\n      }\n    }\n    caseStudiesSection {\n      caseStudiesSubTitle\n      caseStudiesTitle\n    }\n    processSection {\n      processSubTitle\n      processTitle\n      stepProgressInfo {\n        title\n        description\n      }\n    }\n    testimonialSection {\n      testimonialSubTitle\n      testimonialTitle\n      testimonialBackgroundImage {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n    }\n    ourExperienceSection {\n      ourExperienceImage {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n      ourExperienceSubTitle\n      ourExperienceTitle\n      ourExperienceDescription\n      ourExperienceProgress {\n        title\n        percent\n      }\n    }\n    company {\n      companyInfo {\n        icon\n        title\n        description\n      }\n    }\n    contactSection {\n      contactTitle\n      contactImage {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n    }\n  }\n}": types.TemplateHomeDocument,
    "query TemplateTestimonialByPost($slug: String!) {\n  testimonialBy(slug: $slug) {\n    title\n    content\n    uri\n    slug\n    testimonialPost {\n      testimonialThumbnail {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n      testimonialPosition\n    }\n  }\n}": types.TemplateTestimonialByPostDocument,
    "query TemplateTestimonialsPost {\n  testimonials {\n    nodes {\n      title\n      content\n      uri\n      slug\n      testimonialPost {\n        testimonialThumbnail {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        testimonialPosition\n      }\n    }\n  }\n}": types.TemplateTestimonialsPostDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getFooterPage {\n  customFooter {\n    footer {\n      footerBackground {\n        node {\n          link\n          title\n          uri\n        }\n      }\n      footerLogo {\n        node {\n          link\n          title\n          uri\n        }\n      }\n      description\n      followUsSection {\n        title\n        socialMedia {\n          iconTitle\n          show\n        }\n      }\n      quickLinksSection {\n        title\n        menus {\n          title\n          url\n        }\n      }\n      contactInfoSection {\n        title\n        contactInfo {\n          icon\n          title\n          description\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query getFooterPage {\n  customFooter {\n    footer {\n      footerBackground {\n        node {\n          link\n          title\n          uri\n        }\n      }\n      footerLogo {\n        node {\n          link\n          title\n          uri\n        }\n      }\n      description\n      followUsSection {\n        title\n        socialMedia {\n          iconTitle\n          show\n        }\n      }\n      quickLinksSection {\n        title\n        menus {\n          title\n          url\n        }\n      }\n      contactInfoSection {\n        title\n        contactInfo {\n          icon\n          title\n          description\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getHeaderPage {\n  customHeader {\n    header {\n      headerBackgroundColor\n      logo {\n        node {\n          link\n          title\n          uri\n        }\n      }\n      menus {\n        title\n        url\n      }\n      cart {\n        title\n        url\n      }\n    }\n  }\n}"): (typeof documents)["query getHeaderPage {\n  customHeader {\n    header {\n      headerBackgroundColor\n      logo {\n        node {\n          link\n          title\n          uri\n        }\n      }\n      menus {\n        title\n        url\n      }\n      cart {\n        title\n        url\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query TemplateArticlesPost($first: Int!, $after: String) {\n  articles(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    nodes {\n      title\n      content\n      customArticle {\n        thumbnail {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n      }\n      articleCategories {\n        nodes {\n          id\n          name\n          slug\n          uri\n        }\n      }\n      articleTags {\n        nodes {\n          id\n          name\n          slug\n          uri\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query TemplateArticlesPost($first: Int!, $after: String) {\n  articles(first: $first, after: $after) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    nodes {\n      title\n      content\n      customArticle {\n        thumbnail {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n      }\n      articleCategories {\n        nodes {\n          id\n          name\n          slug\n          uri\n        }\n      }\n      articleTags {\n        nodes {\n          id\n          name\n          slug\n          uri\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query TemplateCaseStudiesPost {\n  caseStudies {\n    nodes {\n      title\n      content\n      uri\n      slug\n      caseStudies {\n        thumbnail {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        category\n        projectName\n        skills\n        completeDate\n        client\n      }\n      caseStudyCategories {\n        nodes {\n          id\n          name\n          slug\n          uri\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query TemplateCaseStudiesPost {\n  caseStudies {\n    nodes {\n      title\n      content\n      uri\n      slug\n      caseStudies {\n        thumbnail {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        category\n        projectName\n        skills\n        completeDate\n        client\n      }\n      caseStudyCategories {\n        nodes {\n          id\n          name\n          slug\n          uri\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query TemplateCaseStudyByPost($slug: String!) {\n  caseStudyBy(slug: $slug) {\n    title\n    content\n    uri\n    slug\n    caseStudies {\n      thumbnail {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n      category\n      projectName\n      skills\n      completeDate\n      client\n    }\n    caseStudyCategories {\n      nodes {\n        id\n        name\n        slug\n        uri\n      }\n    }\n  }\n}"): (typeof documents)["query TemplateCaseStudyByPost($slug: String!) {\n  caseStudyBy(slug: $slug) {\n    title\n    content\n    uri\n    slug\n    caseStudies {\n      thumbnail {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n      category\n      projectName\n      skills\n      completeDate\n      client\n    }\n    caseStudyCategories {\n      nodes {\n        id\n        name\n        slug\n        uri\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query TemplateHome($uri: String!) {\n  pageBy(uri: $uri) {\n    title\n    content\n    heroSection {\n      heroSection {\n        heroTitle\n        heroDescription\n        heroCard {\n          title\n          description\n        }\n        heroSubTitle\n        heroBackground {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        buttons {\n          title\n          link\n          backgroundColor\n        }\n      }\n    }\n    aboutSection {\n      aboutSection {\n        aboutImage {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        aboutTitle\n        aboutDescription\n        aboutBigHeading\n      }\n    }\n    ourServicesSection {\n      ourServicesBackground {\n        image {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        color\n      }\n      ourServicesSubTitle\n      ourServicesTitle\n      ourServicesServices {\n        icon\n        title\n        description\n        url\n      }\n    }\n    caseStudiesSection {\n      caseStudiesSubTitle\n      caseStudiesTitle\n    }\n    processSection {\n      processSubTitle\n      processTitle\n      stepProgressInfo {\n        title\n        description\n      }\n    }\n    testimonialSection {\n      testimonialSubTitle\n      testimonialTitle\n      testimonialBackgroundImage {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n    }\n    ourExperienceSection {\n      ourExperienceImage {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n      ourExperienceSubTitle\n      ourExperienceTitle\n      ourExperienceDescription\n      ourExperienceProgress {\n        title\n        percent\n      }\n    }\n    company {\n      companyInfo {\n        icon\n        title\n        description\n      }\n    }\n    contactSection {\n      contactTitle\n      contactImage {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query TemplateHome($uri: String!) {\n  pageBy(uri: $uri) {\n    title\n    content\n    heroSection {\n      heroSection {\n        heroTitle\n        heroDescription\n        heroCard {\n          title\n          description\n        }\n        heroSubTitle\n        heroBackground {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        buttons {\n          title\n          link\n          backgroundColor\n        }\n      }\n    }\n    aboutSection {\n      aboutSection {\n        aboutImage {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        aboutTitle\n        aboutDescription\n        aboutBigHeading\n      }\n    }\n    ourServicesSection {\n      ourServicesBackground {\n        image {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        color\n      }\n      ourServicesSubTitle\n      ourServicesTitle\n      ourServicesServices {\n        icon\n        title\n        description\n        url\n      }\n    }\n    caseStudiesSection {\n      caseStudiesSubTitle\n      caseStudiesTitle\n    }\n    processSection {\n      processSubTitle\n      processTitle\n      stepProgressInfo {\n        title\n        description\n      }\n    }\n    testimonialSection {\n      testimonialSubTitle\n      testimonialTitle\n      testimonialBackgroundImage {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n    }\n    ourExperienceSection {\n      ourExperienceImage {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n      ourExperienceSubTitle\n      ourExperienceTitle\n      ourExperienceDescription\n      ourExperienceProgress {\n        title\n        percent\n      }\n    }\n    company {\n      companyInfo {\n        icon\n        title\n        description\n      }\n    }\n    contactSection {\n      contactTitle\n      contactImage {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query TemplateTestimonialByPost($slug: String!) {\n  testimonialBy(slug: $slug) {\n    title\n    content\n    uri\n    slug\n    testimonialPost {\n      testimonialThumbnail {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n      testimonialPosition\n    }\n  }\n}"): (typeof documents)["query TemplateTestimonialByPost($slug: String!) {\n  testimonialBy(slug: $slug) {\n    title\n    content\n    uri\n    slug\n    testimonialPost {\n      testimonialThumbnail {\n        node {\n          id\n          title\n          altText\n          sourceUrl\n        }\n      }\n      testimonialPosition\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query TemplateTestimonialsPost {\n  testimonials {\n    nodes {\n      title\n      content\n      uri\n      slug\n      testimonialPost {\n        testimonialThumbnail {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        testimonialPosition\n      }\n    }\n  }\n}"): (typeof documents)["query TemplateTestimonialsPost {\n  testimonials {\n    nodes {\n      title\n      content\n      uri\n      slug\n      testimonialPost {\n        testimonialThumbnail {\n          node {\n            id\n            title\n            altText\n            sourceUrl\n          }\n        }\n        testimonialPosition\n      }\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;